/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

// use fold left for accumalation until number has 500 divisors

// create function that finds the ammount of divisors
// find the primes and see how many times they occur in the number

def primeFactors(num: Long): List[Long] = { 
    val exists = (2L to math.sqrt(num).toLong).find(num % _ == 0)
    exists match {
        case Some(factor) => factor :: primeFactors(num/factor)
        case None => List(num)
    }   
}

def amountDivisors(num: Long): Long = {
    primeFactors(num).groupBy(x => x).map(_._2.length + 1).product
}

def triplet(numTriplet: Long): Long = {
    if (numTriplet == 0) 0
    else numTriplet + triplet(numTriplet - 1)
}

val tripletNumber = Iterator.from(1).find(num => amountDivisors(triplet(num)) > 500).head
val answer = triplet(tripletNumber)
println(answer)

